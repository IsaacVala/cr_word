<!-- Copyright (c) Microsoft Corporation.
     Licensed under the MIT License. -->

@using Microsoft.Extensions.Configuration
@using System.Text
@using Microsoft.Identity.Web
@inject IConfiguration Configuration

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - WebApplicationTry2</title>
    
    @* This office.js library holds the JavaScript API for Office.*@
    <script src='https://appsforoffice.microsoft.com/lib/1/hosted/office.js'></script>

    @* The following two files hold the Office UI Fabric styles and components. *@
    <link rel='stylesheet', href='https://appsforoffice.microsoft.com/fabric/2.1.0/fabric.min.css' />
    <link rel='stylesheet', href='https://appsforoffice.microsoft.com/fabric/2.1.0/fabric.components.min.css' />
    
    <link rel='stylesheet', href='/css/site.css' />
    <link rel='stylesheet', href='/css/OfficeThemes.css' />
    <link rel='stylesheet', href='/css/instruction.step.css' />

    <script src='https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.6.0.min.js'></script>
    <script src="https://alcdn.msauth.net/browser/2.22.0/js/msal-browser.min.js"></script>
    <script src="~/js/message-helper.js"></script>
    <script src="~/js/fallback-msal/fallbackAuthTaskpane.js"></script>
    <script src="~/js/ssoAuthES6.js"></script>

    <script>
        const msalInstance = new msal.PublicClientApplication({
            auth: {
        @{
            var clientId = Configuration["AzureAd:ClientId"];
            var instance = Configuration["AzureAd:Instance"];
            var domain = Configuration["AzureAd:Domain"];
            var redirectUri = Configuration["SpaRedirectUri"];

            @Html.Raw($"clientId: '{clientId}',")
            ;
            @Html.Raw($"redirectUri: '{redirectUri}',")
            ;
            @Html.Raw($"authority: '{instance}{domain}',")
            ;
        }
                    },
        cache: {
            cacheLocation: 'sessionStorage',
                storeAuthStateInCookie: false,
                        }
                    });
      
        function getTokenFromCache(scopes) {
        @if (User.Identity is not null)
        {
            @Html.Raw($"const username = '{User.Identity.Name}';")
            ;
        }
        else
        {
            @Html.Raw($"const username = '';")
            ;
        }

                    const account = msalInstance.getAllAccounts()
                .find(account => account.username === username);

            return msalInstance.acquireTokenSilent({
                account,
                scopes
            })
                .catch(error => {
                    if (error instanceof msal.InteractionRequiredAuthError) {
                        return msalInstance.acquireTokenRedirect({
                            account,
                            scopes,
                            "extraScopesToConsent": ["files.read"]
                        });
                    }
                });
        };

        function callMSGraph(path, token) {
        @{
            var graphEndpoint = Configuration["DownstreamApi:BaseUrl"];
            if (!string.IsNullOrEmpty(graphEndpoint))
            {
                @Html.Raw($"const graphEndpoint = '{graphEndpoint}';")
                ;
            }
            else
            {
                @Html.Raw($"const graphEndpoint = '';")
                ;
            }
        }

                    const headers = new Headers();
            const bearer = `Bearer ${token}`;
            headers.append("Authorization", bearer);

            const options = {
                method: "GET",
                headers
            };

            console.log('request made to Graph API at: ' + new Date().toString());

            return fetch(`${graphEndpoint}${path}`, options)
                .catch(error => console.log(error))
        }
    </script>
</head>
<body class="ms-font-m cancelDefaultBrowserIndentation">

    <div id="content">
        @RenderBody()
        <partial name="_LoginPartial" />
    </div>
    <script>
        (function () {
            const scopes =
        @{
            var apiScopes = Configuration["DownstreamApi:Scopes"].Split(' ');
            @Html.Raw("[")
            ;

            foreach (var scope in apiScopes)
            {
                @Html.Raw($"'{scope}',")
            }

            @Html.Raw("];")
            ;

            Context.Session.TryGetValue(Constants.SpaAuthCode, out var spaCode);

            if (spaCode is not null && !string.IsNullOrEmpty(Encoding.Default.GetString(spaCode)))
            {
                @Html.Raw($"const code = '{Encoding.Default.GetString(spaCode)}';")
                ;
                Context.Session.Remove(Constants.SpaAuthCode);
            }
            else
            {
                @Html.Raw($"const code = '';")
                ;
            }
        }

                    if (!!code) {
                msalInstance
                    .handleRedirectPromise()
                    .then(result => {
                        if (result) {
                            console.log('MSAL: Returning from login');
                            document.dispatchEvent(new Event('AUTHENTICATED'));
                            return result;
                        }

                        const timeLabel = "Time for acquireTokenByCode";
                        console.time(timeLabel);
                        console.log('MSAL: acquireTokenByCode hybrid parameters present');

                        return msalInstance.acquireTokenByCode({
                            code,
                            scopes,
                        })
                            .then(result => {
                                console.timeEnd(timeLabel);
                                console.log('MSAL: acquireTokenByCode completed successfully', result);
                                document.dispatchEvent(new Event('AUTHENTICATED'));
                            })
                            .catch(error => {
                                console.timeEnd(timeLabel);
                                console.error('MSAL: acquireTokenByCode failed', error);
                                if (error instanceof msal.InteractionRequiredAuthError) {
                                    console.log('MSAL: acquireTokenByCode failed, redirecting');

        @{
            if (User.Identity is not null)
            {
                @Html.Raw($"const username = '{User.Identity.Name}';")
                ;
            }
            else
            {
                @Html.Raw($"const username = '';")
                ;
            }
        }

                                            const account = msalInstance.getAllAccounts()
                                        .find(account => account.username === username);

                                    return msalInstance.acquireTokenRedirect({
                                        account,
                                        scopes
                                    });
                                }
                            });
                    })
            }
            else {
                document.dispatchEvent(new Event('AUTHENTICATED'));
            }
        })();
    </script>
    @RenderSection("Scripts", required: false)
</body>
</html>
